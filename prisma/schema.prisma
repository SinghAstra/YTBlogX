generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  refresh_token_expires_in Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  videos        Video[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  id               String      @id @default(cuid())
  youtubeId        String
  title            String
  channelName      String
  videoThumbnail   String
  channelThumbnail String
  duration         String
  userId           String
  overview         String?
  createdAt        DateTime    @default(now())
  status           VideoStatus @default(PENDING)
  blogs            Blog[]
  logs              Log[]
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Blog {
  id         String   @id @default(cuid())
  part       Int
  videoId    String
  title      String?
  transcript String
  content    String?
  createdAt  DateTime @default(now())
  summary    String?
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([videoId])
}

model Log {
  id        String      @id
  videoId   String
  message   String
  status    VideoStatus
  createdAt DateTime    @default(now())
  Video     Video       @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

enum VideoStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
