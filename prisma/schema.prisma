generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  conversions   Conversion[]
  savedBlogs    Blog[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VideoMetaData{
  id            String    @id @default(cuid())
  conversionId  String    @unique
  conversion    Conversion @relation(fields: [conversionId], references: [id])

  channelId String?
  videoTitle String?
  videoDescription String?
  thumbnail String?
  channelTitle String?
  videoDuration String?
  viewCount Int?
  likeCount Int?
}

model Conversion {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  
  youtubeUrl    String
  status        ConversionStatus @default(PENDING)
  
  videoMetaData VideoMetaData?
  
  // Generated content
  generatedBlog Blog?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum ConversionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model Blog {
  id            String    @id @default(cuid())
  slug          String    @unique
  title         String
  content       String    @db.Text
  
  // Relationship to Conversion
  conversionId  String    @unique
  conversion    Conversion @relation(fields: [conversionId], references: [id])

  savedByUsers  User[]
  
  // Optional public sharing
  isPublic      Boolean   @default(false)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}