generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


// Next Auth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  videos Video[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  id                  String @id @default(cuid())
  youtubeId           String 
  title               String
  channelName         String
  videoThumbnail      String
  channelThumbnail    String
  duration            String // Duration in ISO 8601 format
  userId              String  
  processingState     VideoProcessingState @default(PENDING)
  overview            String? @db.Text 
  createdAt           DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blogs Blog[]

  @@index([userId])
}

enum VideoProcessingState {
  PENDING
  COMPLETED
  FAILED
}

model Blog {
  id       String @id @default(cuid())
  videoId  String
  title    String
  transcript String  @db.Text // Original transcript segment
  content   String   @db.Text // MDX content generated by LLM
  createdAt DateTime @default(now())
  summary   String?  @db.Text 

  // Relations
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([videoId])
}
